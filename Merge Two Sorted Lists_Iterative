/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeUtil(ListNode* l1,ListNode* l2)
    {
        if(!l1->next)
        {
            l1->next=l2;
            return l1;
        }
        ListNode* curr1=l1 ,*next1=l1->next;
        ListNode* curr2=l2 ,*next2=l2->next;
        
        while(next1 && curr2)
        {
            if(curr2->val >= curr1->val && curr2->val<=next1->val)
            {
                curr1->next=curr2;
                next2=curr2->next;
                curr2->next=next1;
                curr1 = curr2; 
            curr2 = next2; 
            }
            else
            {   if(next1->next){
                next1=next1->next;
                curr1=curr1->next;
                
                
            }
             else
             {
                 next1->next=curr2;
                 
                 return l1;
             }
            }
        }
        return l1;
    }
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        if(l1->val<l2->val)
            return mergeUtil(l1,l2);
        else
            return mergeUtil(l2,l1);
        
    }
};
